{"version":3,"file":"component---src-posts-second-blog-mdx.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AACA,SAASG,iBAAT,CAA2BC,KAA3B,EAAkC;EAChC,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc;IAChCC,EAAE,EAAE,IAD4B;IAEhCC,EAAE,EAAE,IAF4B;IAGhCC,CAAC,EAAE;EAH6B,CAAd,EAIjBT,+DAAkB,EAJD,EAIKG,KAAK,CAACO,UAJX,CAApB;;EAKA,oBAAOT,0DAAA,CAAoBA,uDAApB,EAAoC,IAApC,eAA0CA,0DAAA,CAAoBG,WAAW,CAACG,EAAhC,EAAoC,IAApC,EAA0C,QAA1C,CAA1C,EAA+F,IAA/F,eAAqGN,0DAAA,CAAoBG,WAAW,CAACI,EAAhC,EAAoC,IAApC,EAA0C,QAA1C,CAArG,EAA0J,IAA1J,eAAgKP,0DAAA,CAAoBG,WAAW,CAACK,CAAhC,EAAmC,IAAnC,EAAyC,sCAAzC,CAAhK,CAAP;AACD;;AACD,SAASI,UAAT,CAAoBV,KAAK,GAAG,EAA5B,EAAgC;EAC9B,MAAM;IAACW,OAAO,EAAEC;EAAV,IAAuBV,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,+DAAkB,EAApC,EAAwCG,KAAK,CAACO,UAA9C,CAA7B;EACA,OAAOK,SAAS,gBAAGd,0DAAA,CAAoBc,SAApB,EAA+BZ,KAA/B,eAAsCF,0DAAA,CAAoBC,iBAApB,EAAuCC,KAAvC,CAAtC,CAAH,GAA0FD,iBAAiB,CAACC,KAAD,CAA3H;AACD;;AACD,iEAAeU,UAAf;;;;;;;;;;;;;;;;;;ACfA;AACA,aAAa,2BAA2B;AACxC,aAAa,mCAAmC;AAChD;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA,cAAc,SAAS;AACvB;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA,aAAa;AACb;AACA;;AAEyB;;AAEzB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,mBAAmB,gDAAmB,GAAG;;AAEhD;AACA,WAAW,oCAAoC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;;AAEA;AACA,aAAa,2BAA2B,0BAA0B;AAClE,eAAe;AACf;AACA;AACA;AACA,WAAW,gDAAmB,aAAa,wBAAwB;AACnE;AACA;;AAEA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC;AACA;AACA,aAAa;AACb;AACA;AACO;AACP,4BAA4B,6CAAgB;AAC5C;AACA,SAAS,0CAAa;AACtB;AACA;AACA;AACA;;AAEA,YAAY;AACZ,GAAG;AACH;;AAEA,WAAW,YAAY;AACvB;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACO,sBAAsB,2CAA2C;AACxE;;AAEA;AACA;AACA;;AAEA,SAAS,gDAAmB;AAC5B;AACA,KAAK,qBAAqB;AAC1B;AACA;AACA","sources":["webpack://Ceyblogs/./src/posts/second-blog.mdx","webpack://Ceyblogs/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h3: \"h3\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Hello2\"), \"\\n\", React.createElement(_components.h3, null, \"sexsux\"), \"\\n\", React.createElement(_components.p, null, \"[ ] - this time i will do ur mom too\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["useMDXComponents","_provideComponents","React","_createMdxContent","props","_components","Object","assign","h1","h3","p","components","createElement","Fragment","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}